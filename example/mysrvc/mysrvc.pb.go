// Code generated by protoc-gen-gogo.
// source: mysrvc/mysrvc.proto
// DO NOT EDIT!

/*
	Package mysrvc is a generated protocol buffer package.

	It is generated from these files:
		mysrvc/mysrvc.proto

	It has these top-level messages:
		LastMod_Input
		LastMod_Output
		Contracts_Input
		Contracts_Output
		ContractsRecTyp_Bruno
*/
package mysrvc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LastMod_Input struct {
}

func (m *LastMod_Input) Reset()                    { *m = LastMod_Input{} }
func (m *LastMod_Input) String() string            { return proto.CompactTextString(m) }
func (*LastMod_Input) ProtoMessage()               {}
func (*LastMod_Input) Descriptor() ([]byte, []int) { return fileDescriptorMysrvc, []int{0} }

type LastMod_Output struct {
	// VARCHAR2(32767)
	Ret string `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (m *LastMod_Output) Reset()                    { *m = LastMod_Output{} }
func (m *LastMod_Output) String() string            { return proto.CompactTextString(m) }
func (*LastMod_Output) ProtoMessage()               {}
func (*LastMod_Output) Descriptor() ([]byte, []int) { return fileDescriptorMysrvc, []int{1} }

func (m *LastMod_Output) GetRet() string {
	if m != nil {
		return m.Ret
	}
	return ""
}

type Contracts_Input struct {
	// INTEGER(10)
	PBazon int32 `protobuf:"zigzag32,1,opt,name=p_bazon,json=pBazon,proto3" json:"p_bazon,omitempty"`
	// VARCHAR2(32767)
	PSzerzAzon string `protobuf:"bytes,2,opt,name=p_szerz_azon,json=pSzerzAzon,proto3" json:"p_szerz_azon,omitempty"`
	// VARCHAR2(32767)
	PModkod string `protobuf:"bytes,3,opt,name=p_modkod,json=pModkod,proto3" json:"p_modkod,omitempty"`
	// VARCHAR2(32767)
	PKotvenyszam string `protobuf:"bytes,4,opt,name=p_kotvenyszam,json=pKotvenyszam,proto3" json:"p_kotvenyszam,omitempty"`
	// NUMBER
	PAjanlatsorszam float64 `protobuf:"fixed64,5,opt,name=p_ajanlatsorszam,json=pAjanlatsorszam,proto3" json:"p_ajanlatsorszam,omitempty"`
	// VARCHAR2(32767)
	PUgyfelnev string `protobuf:"bytes,6,opt,name=p_ugyfelnev,json=pUgyfelnev,proto3" json:"p_ugyfelnev,omitempty"`
	// VARCHAR2(32767)
	PTelepules string `protobuf:"bytes,7,opt,name=p_telepules,json=pTelepules,proto3" json:"p_telepules,omitempty"`
	// INTEGER(10)
	PTagAzon int32 `protobuf:"zigzag32,8,opt,name=p_tag_azon,json=pTagAzon,proto3" json:"p_tag_azon,omitempty"`
	// INTEGER(10)
	PUkTorzsszam int32 `protobuf:"zigzag32,9,opt,name=p_uk_torzsszam,json=pUkTorzsszam,proto3" json:"p_uk_torzsszam,omitempty"`
	// VARCHAR2(32767)
	PRendszam string `protobuf:"bytes,10,opt,name=p_rendszam,json=pRendszam,proto3" json:"p_rendszam,omitempty"`
	// VARCHAR2(32767)
	PKockhelyIrszam string `protobuf:"bytes,11,opt,name=p_kockhely_irszam,json=pKockhelyIrszam,proto3" json:"p_kockhely_irszam,omitempty"`
	// INTEGER(10)
	PKockhelyKtid int32 `protobuf:"zigzag32,12,opt,name=p_kockhely_ktid,json=pKockhelyKtid,proto3" json:"p_kockhely_ktid,omitempty"`
	// VARCHAR2(32767)
	PElozmenyBizt string `protobuf:"bytes,13,opt,name=p_elozmeny_bizt,json=pElozmenyBizt,proto3" json:"p_elozmeny_bizt,omitempty"`
	// INTEGER(10)
	PFlottaAzon int32 `protobuf:"zigzag32,14,opt,name=p_flotta_azon,json=pFlottaAzon,proto3" json:"p_flotta_azon,omitempty"`
	// INTEGER(10)
	PFlottaVonalkod int32 `protobuf:"zigzag32,15,opt,name=p_flotta_vonalkod,json=pFlottaVonalkod,proto3" json:"p_flotta_vonalkod,omitempty"`
	// INTEGER(10)
	PLimit int32 `protobuf:"zigzag32,16,opt,name=p_limit,json=pLimit,proto3" json:"p_limit,omitempty"`
	// INTEGER(10)
	POffset int32 `protobuf:"zigzag32,17,opt,name=p_offset,json=pOffset,proto3" json:"p_offset,omitempty"`
	// VARCHAR2(32767)
	POrder string `protobuf:"bytes,18,opt,name=p_order,json=pOrder,proto3" json:"p_order,omitempty"`
	// VARCHAR2(32767)
	PCount string `protobuf:"bytes,19,opt,name=p_count,json=pCount,proto3" json:"p_count,omitempty"`
}

func (m *Contracts_Input) Reset()                    { *m = Contracts_Input{} }
func (m *Contracts_Input) String() string            { return proto.CompactTextString(m) }
func (*Contracts_Input) ProtoMessage()               {}
func (*Contracts_Input) Descriptor() ([]byte, []int) { return fileDescriptorMysrvc, []int{2} }

func (m *Contracts_Input) GetPBazon() int32 {
	if m != nil {
		return m.PBazon
	}
	return 0
}

func (m *Contracts_Input) GetPSzerzAzon() string {
	if m != nil {
		return m.PSzerzAzon
	}
	return ""
}

func (m *Contracts_Input) GetPModkod() string {
	if m != nil {
		return m.PModkod
	}
	return ""
}

func (m *Contracts_Input) GetPKotvenyszam() string {
	if m != nil {
		return m.PKotvenyszam
	}
	return ""
}

func (m *Contracts_Input) GetPAjanlatsorszam() float64 {
	if m != nil {
		return m.PAjanlatsorszam
	}
	return 0
}

func (m *Contracts_Input) GetPUgyfelnev() string {
	if m != nil {
		return m.PUgyfelnev
	}
	return ""
}

func (m *Contracts_Input) GetPTelepules() string {
	if m != nil {
		return m.PTelepules
	}
	return ""
}

func (m *Contracts_Input) GetPTagAzon() int32 {
	if m != nil {
		return m.PTagAzon
	}
	return 0
}

func (m *Contracts_Input) GetPUkTorzsszam() int32 {
	if m != nil {
		return m.PUkTorzsszam
	}
	return 0
}

func (m *Contracts_Input) GetPRendszam() string {
	if m != nil {
		return m.PRendszam
	}
	return ""
}

func (m *Contracts_Input) GetPKockhelyIrszam() string {
	if m != nil {
		return m.PKockhelyIrszam
	}
	return ""
}

func (m *Contracts_Input) GetPKockhelyKtid() int32 {
	if m != nil {
		return m.PKockhelyKtid
	}
	return 0
}

func (m *Contracts_Input) GetPElozmenyBizt() string {
	if m != nil {
		return m.PElozmenyBizt
	}
	return ""
}

func (m *Contracts_Input) GetPFlottaAzon() int32 {
	if m != nil {
		return m.PFlottaAzon
	}
	return 0
}

func (m *Contracts_Input) GetPFlottaVonalkod() int32 {
	if m != nil {
		return m.PFlottaVonalkod
	}
	return 0
}

func (m *Contracts_Input) GetPLimit() int32 {
	if m != nil {
		return m.PLimit
	}
	return 0
}

func (m *Contracts_Input) GetPOffset() int32 {
	if m != nil {
		return m.POffset
	}
	return 0
}

func (m *Contracts_Input) GetPOrder() string {
	if m != nil {
		return m.POrder
	}
	return ""
}

func (m *Contracts_Input) GetPCount() string {
	if m != nil {
		return m.PCount
	}
	return ""
}

type Contracts_Output struct {
	// INTEGER(10)
	PMaradt int32 `protobuf:"zigzag32,1,opt,name=p_maradt,json=pMaradt,proto3" json:"p_maradt,omitempty"`
	// INTEGER(10)
	PHibaKod int32 `protobuf:"zigzag32,2,opt,name=p_hiba_kod,json=pHibaKod,proto3" json:"p_hiba_kod,omitempty"`
	// VARCHAR2(32767)
	PHibaSzov string                   `protobuf:"bytes,3,opt,name=p_hiba_szov,json=pHibaSzov,proto3" json:"p_hiba_szov,omitempty"`
	Ret       []*ContractsRecTyp_Bruno `protobuf:"bytes,4,rep,name=ret" json:"ret,omitempty"`
}

func (m *Contracts_Output) Reset()                    { *m = Contracts_Output{} }
func (m *Contracts_Output) String() string            { return proto.CompactTextString(m) }
func (*Contracts_Output) ProtoMessage()               {}
func (*Contracts_Output) Descriptor() ([]byte, []int) { return fileDescriptorMysrvc, []int{3} }

func (m *Contracts_Output) GetPMaradt() int32 {
	if m != nil {
		return m.PMaradt
	}
	return 0
}

func (m *Contracts_Output) GetPHibaKod() int32 {
	if m != nil {
		return m.PHibaKod
	}
	return 0
}

func (m *Contracts_Output) GetPHibaSzov() string {
	if m != nil {
		return m.PHibaSzov
	}
	return ""
}

func (m *Contracts_Output) GetRet() []*ContractsRecTyp_Bruno {
	if m != nil {
		return m.Ret
	}
	return nil
}

type ContractsRecTyp_Bruno struct {
	// INTEGER(10)
	RowNum int32 `protobuf:"zigzag32,1,opt,name=row_num,json=rowNum,proto3" json:"row_num,omitempty"`
	// NUMBER(9)
	ContractNumber float64 `protobuf:"fixed64,2,opt,name=contract_number,json=contractNumber,proto3" json:"contract_number,omitempty"`
	// NUMBER(9)
	MemberCode float64 `protobuf:"fixed64,3,opt,name=member_code,json=memberCode,proto3" json:"member_code,omitempty"`
	// VARCHAR2(6)
	Modkod string `protobuf:"bytes,4,opt,name=modkod,proto3" json:"modkod,omitempty"`
	// VARCHAR2(8)
	Modrnev string `protobuf:"bytes,5,opt,name=modrnev,proto3" json:"modrnev,omitempty"`
	// NUMBER(9)
	BidId float64 `protobuf:"fixed64,6,opt,name=bid_id,json=bidId,proto3" json:"bid_id,omitempty"`
	// VARCHAR2(10)
	ContractOldId string `protobuf:"bytes,7,opt,name=contract_old_id,json=contractOldId,proto3" json:"contract_old_id,omitempty"`
	// VARCHAR2(2)
	ContractStatus string `protobuf:"bytes,8,opt,name=contract_status,json=contractStatus,proto3" json:"contract_status,omitempty"`
	// VARCHAR2(80)
	ContractStatusName string `protobuf:"bytes,9,opt,name=contract_status_name,json=contractStatusName,proto3" json:"contract_status_name,omitempty"`
	// VARCHAR2(40)
	ContractStatusShort string `protobuf:"bytes,10,opt,name=contract_status_short,json=contractStatusShort,proto3" json:"contract_status_short,omitempty"`
	// DATE
	ContractRecordingDate string `protobuf:"bytes,11,opt,name=contract_recording_date,json=contractRecordingDate,proto3" json:"contract_recording_date,omitempty"`
	// DATE
	ContractBtkezd string `protobuf:"bytes,12,opt,name=contract_btkezd,json=contractBtkezd,proto3" json:"contract_btkezd,omitempty"`
	// DATE
	ContractBeginDate string `protobuf:"bytes,13,opt,name=contract_begin_date,json=contractBeginDate,proto3" json:"contract_begin_date,omitempty"`
	// DATE
	ContractDeletionValidFrom string `protobuf:"bytes,14,opt,name=contract_deletion_valid_from,json=contractDeletionValidFrom,proto3" json:"contract_deletion_valid_from,omitempty"`
	// DATE
	ContractBalanceDate string `protobuf:"bytes,15,opt,name=contract_balance_date,json=contractBalanceDate,proto3" json:"contract_balance_date,omitempty"`
	// DATE
	ContractFutureBalanceDate string `protobuf:"bytes,16,opt,name=contract_future_balance_date,json=contractFutureBalanceDate,proto3" json:"contract_future_balance_date,omitempty"`
	// NUMBER(12, 2)
	ContractYearlyPrice float64 `protobuf:"fixed64,17,opt,name=contract_yearly_price,json=contractYearlyPrice,proto3" json:"contract_yearly_price,omitempty"`
	// VARCHAR2(5)
	ContractAnniversary string `protobuf:"bytes,18,opt,name=contract_anniversary,json=contractAnniversary,proto3" json:"contract_anniversary,omitempty"`
	// NUMBER(12, 2)
	ContractBalance float64 `protobuf:"fixed64,19,opt,name=contract_balance,json=contractBalance,proto3" json:"contract_balance,omitempty"`
	// NUMBER(12, 2)
	ElviDijhatralek float64 `protobuf:"fixed64,20,opt,name=elvi_dijhatralek,json=elviDijhatralek,proto3" json:"elvi_dijhatralek,omitempty"`
	// VARCHAR2(40)
	ClientName string `protobuf:"bytes,21,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	// NUMBER(9)
	ClientCode float64 `protobuf:"fixed64,22,opt,name=client_code,json=clientCode,proto3" json:"client_code,omitempty"`
	// NUMBER(9)
	OwnerCode float64 `protobuf:"fixed64,23,opt,name=owner_code,json=ownerCode,proto3" json:"owner_code,omitempty"`
	// VARCHAR2(11)
	CarPlate string `protobuf:"bytes,24,opt,name=car_plate,json=carPlate,proto3" json:"car_plate,omitempty"`
	// VARCHAR2(40)
	CarCategory string `protobuf:"bytes,25,opt,name=car_category,json=carCategory,proto3" json:"car_category,omitempty"`
	// VARCHAR2(40)
	CarMake string `protobuf:"bytes,26,opt,name=car_make,json=carMake,proto3" json:"car_make,omitempty"`
	// VARCHAR2(40)
	CarModel string `protobuf:"bytes,27,opt,name=car_model,json=carModel,proto3" json:"car_model,omitempty"`
	// VARCHAR2(10)
	DealerCode string `protobuf:"bytes,28,opt,name=dealer_code,json=dealerCode,proto3" json:"dealer_code,omitempty"`
	// VARCHAR2(40)
	DealerName string `protobuf:"bytes,29,opt,name=dealer_name,json=dealerName,proto3" json:"dealer_name,omitempty"`
	// VARCHAR2(5)
	KockhelyIrszam string `protobuf:"bytes,30,opt,name=kockhely_irszam,json=kockhelyIrszam,proto3" json:"kockhely_irszam,omitempty"`
	// VARCHAR2(25)
	KockhelyTelepules string `protobuf:"bytes,31,opt,name=kockhely_telepules,json=kockhelyTelepules,proto3" json:"kockhely_telepules,omitempty"`
	// VARCHAR2(255)
	KockhelyCim string `protobuf:"bytes,32,opt,name=kockhely_cim,json=kockhelyCim,proto3" json:"kockhely_cim,omitempty"`
	// VARCHAR2(5)
	ClientPpid string `protobuf:"bytes,33,opt,name=client_ppid,json=clientPpid,proto3" json:"client_ppid,omitempty"`
	// VARCHAR2(25)
	ClientCity string `protobuf:"bytes,34,opt,name=client_city,json=clientCity,proto3" json:"client_city,omitempty"`
	// VARCHAR2(2)
	ElozmenybiztKod string `protobuf:"bytes,35,opt,name=elozmenybizt_kod,json=elozmenybiztKod,proto3" json:"elozmenybizt_kod,omitempty"`
	// VARCHAR2(40)
	ElozmenybiztNev string `protobuf:"bytes,36,opt,name=elozmenybizt_nev,json=elozmenybiztNev,proto3" json:"elozmenybizt_nev,omitempty"`
	// NUMBER(9)
	FlottaAzon float64 `protobuf:"fixed64,37,opt,name=flotta_azon,json=flottaAzon,proto3" json:"flotta_azon,omitempty"`
	// NUMBER(9)
	FlottaVonalkod float64 `protobuf:"fixed64,38,opt,name=flotta_vonalkod,json=flottaVonalkod,proto3" json:"flotta_vonalkod,omitempty"`
}

func (m *ContractsRecTyp_Bruno) Reset()                    { *m = ContractsRecTyp_Bruno{} }
func (m *ContractsRecTyp_Bruno) String() string            { return proto.CompactTextString(m) }
func (*ContractsRecTyp_Bruno) ProtoMessage()               {}
func (*ContractsRecTyp_Bruno) Descriptor() ([]byte, []int) { return fileDescriptorMysrvc, []int{4} }

func (m *ContractsRecTyp_Bruno) GetRowNum() int32 {
	if m != nil {
		return m.RowNum
	}
	return 0
}

func (m *ContractsRecTyp_Bruno) GetContractNumber() float64 {
	if m != nil {
		return m.ContractNumber
	}
	return 0
}

func (m *ContractsRecTyp_Bruno) GetMemberCode() float64 {
	if m != nil {
		return m.MemberCode
	}
	return 0
}

func (m *ContractsRecTyp_Bruno) GetModkod() string {
	if m != nil {
		return m.Modkod
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetModrnev() string {
	if m != nil {
		return m.Modrnev
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetBidId() float64 {
	if m != nil {
		return m.BidId
	}
	return 0
}

func (m *ContractsRecTyp_Bruno) GetContractOldId() string {
	if m != nil {
		return m.ContractOldId
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetContractStatus() string {
	if m != nil {
		return m.ContractStatus
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetContractStatusName() string {
	if m != nil {
		return m.ContractStatusName
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetContractStatusShort() string {
	if m != nil {
		return m.ContractStatusShort
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetContractRecordingDate() string {
	if m != nil {
		return m.ContractRecordingDate
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetContractBtkezd() string {
	if m != nil {
		return m.ContractBtkezd
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetContractBeginDate() string {
	if m != nil {
		return m.ContractBeginDate
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetContractDeletionValidFrom() string {
	if m != nil {
		return m.ContractDeletionValidFrom
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetContractBalanceDate() string {
	if m != nil {
		return m.ContractBalanceDate
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetContractFutureBalanceDate() string {
	if m != nil {
		return m.ContractFutureBalanceDate
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetContractYearlyPrice() float64 {
	if m != nil {
		return m.ContractYearlyPrice
	}
	return 0
}

func (m *ContractsRecTyp_Bruno) GetContractAnniversary() string {
	if m != nil {
		return m.ContractAnniversary
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetContractBalance() float64 {
	if m != nil {
		return m.ContractBalance
	}
	return 0
}

func (m *ContractsRecTyp_Bruno) GetElviDijhatralek() float64 {
	if m != nil {
		return m.ElviDijhatralek
	}
	return 0
}

func (m *ContractsRecTyp_Bruno) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetClientCode() float64 {
	if m != nil {
		return m.ClientCode
	}
	return 0
}

func (m *ContractsRecTyp_Bruno) GetOwnerCode() float64 {
	if m != nil {
		return m.OwnerCode
	}
	return 0
}

func (m *ContractsRecTyp_Bruno) GetCarPlate() string {
	if m != nil {
		return m.CarPlate
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetCarCategory() string {
	if m != nil {
		return m.CarCategory
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetCarMake() string {
	if m != nil {
		return m.CarMake
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetCarModel() string {
	if m != nil {
		return m.CarModel
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetDealerCode() string {
	if m != nil {
		return m.DealerCode
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetDealerName() string {
	if m != nil {
		return m.DealerName
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetKockhelyIrszam() string {
	if m != nil {
		return m.KockhelyIrszam
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetKockhelyTelepules() string {
	if m != nil {
		return m.KockhelyTelepules
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetKockhelyCim() string {
	if m != nil {
		return m.KockhelyCim
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetClientPpid() string {
	if m != nil {
		return m.ClientPpid
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetClientCity() string {
	if m != nil {
		return m.ClientCity
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetElozmenybiztKod() string {
	if m != nil {
		return m.ElozmenybiztKod
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetElozmenybiztNev() string {
	if m != nil {
		return m.ElozmenybiztNev
	}
	return ""
}

func (m *ContractsRecTyp_Bruno) GetFlottaAzon() float64 {
	if m != nil {
		return m.FlottaAzon
	}
	return 0
}

func (m *ContractsRecTyp_Bruno) GetFlottaVonalkod() float64 {
	if m != nil {
		return m.FlottaVonalkod
	}
	return 0
}

func init() {
	proto.RegisterType((*LastMod_Input)(nil), "mysrvc.LastMod_Input")
	proto.RegisterType((*LastMod_Output)(nil), "mysrvc.LastMod_Output")
	proto.RegisterType((*Contracts_Input)(nil), "mysrvc.Contracts_Input")
	proto.RegisterType((*Contracts_Output)(nil), "mysrvc.Contracts_Output")
	proto.RegisterType((*ContractsRecTyp_Bruno)(nil), "mysrvc.ContractsRecTyp_Bruno")
}
func (m *LastMod_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastMod_Input) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LastMod_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastMod_Output) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ret) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.Ret)))
		i += copy(dAtA[i:], m.Ret)
	}
	return i, nil
}

func (m *Contracts_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contracts_Input) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PBazon != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64((uint32(m.PBazon)<<1)^uint32((m.PBazon>>31))))
	}
	if len(m.PSzerzAzon) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.PSzerzAzon)))
		i += copy(dAtA[i:], m.PSzerzAzon)
	}
	if len(m.PModkod) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.PModkod)))
		i += copy(dAtA[i:], m.PModkod)
	}
	if len(m.PKotvenyszam) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.PKotvenyszam)))
		i += copy(dAtA[i:], m.PKotvenyszam)
	}
	if m.PAjanlatsorszam != 0 {
		dAtA[i] = 0x29
		i++
		i = encodeFixed64Mysrvc(dAtA, i, uint64(math.Float64bits(float64(m.PAjanlatsorszam))))
	}
	if len(m.PUgyfelnev) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.PUgyfelnev)))
		i += copy(dAtA[i:], m.PUgyfelnev)
	}
	if len(m.PTelepules) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.PTelepules)))
		i += copy(dAtA[i:], m.PTelepules)
	}
	if m.PTagAzon != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64((uint32(m.PTagAzon)<<1)^uint32((m.PTagAzon>>31))))
	}
	if m.PUkTorzsszam != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64((uint32(m.PUkTorzsszam)<<1)^uint32((m.PUkTorzsszam>>31))))
	}
	if len(m.PRendszam) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.PRendszam)))
		i += copy(dAtA[i:], m.PRendszam)
	}
	if len(m.PKockhelyIrszam) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.PKockhelyIrszam)))
		i += copy(dAtA[i:], m.PKockhelyIrszam)
	}
	if m.PKockhelyKtid != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64((uint32(m.PKockhelyKtid)<<1)^uint32((m.PKockhelyKtid>>31))))
	}
	if len(m.PElozmenyBizt) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.PElozmenyBizt)))
		i += copy(dAtA[i:], m.PElozmenyBizt)
	}
	if m.PFlottaAzon != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64((uint32(m.PFlottaAzon)<<1)^uint32((m.PFlottaAzon>>31))))
	}
	if m.PFlottaVonalkod != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64((uint32(m.PFlottaVonalkod)<<1)^uint32((m.PFlottaVonalkod>>31))))
	}
	if m.PLimit != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64((uint32(m.PLimit)<<1)^uint32((m.PLimit>>31))))
	}
	if m.POffset != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64((uint32(m.POffset)<<1)^uint32((m.POffset>>31))))
	}
	if len(m.POrder) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.POrder)))
		i += copy(dAtA[i:], m.POrder)
	}
	if len(m.PCount) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.PCount)))
		i += copy(dAtA[i:], m.PCount)
	}
	return i, nil
}

func (m *Contracts_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contracts_Output) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PMaradt != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64((uint32(m.PMaradt)<<1)^uint32((m.PMaradt>>31))))
	}
	if m.PHibaKod != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64((uint32(m.PHibaKod)<<1)^uint32((m.PHibaKod>>31))))
	}
	if len(m.PHibaSzov) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.PHibaSzov)))
		i += copy(dAtA[i:], m.PHibaSzov)
	}
	if len(m.Ret) > 0 {
		for _, msg := range m.Ret {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMysrvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ContractsRecTyp_Bruno) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractsRecTyp_Bruno) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RowNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64((uint32(m.RowNum)<<1)^uint32((m.RowNum>>31))))
	}
	if m.ContractNumber != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Mysrvc(dAtA, i, uint64(math.Float64bits(float64(m.ContractNumber))))
	}
	if m.MemberCode != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Mysrvc(dAtA, i, uint64(math.Float64bits(float64(m.MemberCode))))
	}
	if len(m.Modkod) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.Modkod)))
		i += copy(dAtA[i:], m.Modkod)
	}
	if len(m.Modrnev) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.Modrnev)))
		i += copy(dAtA[i:], m.Modrnev)
	}
	if m.BidId != 0 {
		dAtA[i] = 0x31
		i++
		i = encodeFixed64Mysrvc(dAtA, i, uint64(math.Float64bits(float64(m.BidId))))
	}
	if len(m.ContractOldId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.ContractOldId)))
		i += copy(dAtA[i:], m.ContractOldId)
	}
	if len(m.ContractStatus) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.ContractStatus)))
		i += copy(dAtA[i:], m.ContractStatus)
	}
	if len(m.ContractStatusName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.ContractStatusName)))
		i += copy(dAtA[i:], m.ContractStatusName)
	}
	if len(m.ContractStatusShort) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.ContractStatusShort)))
		i += copy(dAtA[i:], m.ContractStatusShort)
	}
	if len(m.ContractRecordingDate) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.ContractRecordingDate)))
		i += copy(dAtA[i:], m.ContractRecordingDate)
	}
	if len(m.ContractBtkezd) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.ContractBtkezd)))
		i += copy(dAtA[i:], m.ContractBtkezd)
	}
	if len(m.ContractBeginDate) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.ContractBeginDate)))
		i += copy(dAtA[i:], m.ContractBeginDate)
	}
	if len(m.ContractDeletionValidFrom) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.ContractDeletionValidFrom)))
		i += copy(dAtA[i:], m.ContractDeletionValidFrom)
	}
	if len(m.ContractBalanceDate) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.ContractBalanceDate)))
		i += copy(dAtA[i:], m.ContractBalanceDate)
	}
	if len(m.ContractFutureBalanceDate) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.ContractFutureBalanceDate)))
		i += copy(dAtA[i:], m.ContractFutureBalanceDate)
	}
	if m.ContractYearlyPrice != 0 {
		dAtA[i] = 0x89
		i++
		dAtA[i] = 0x1
		i++
		i = encodeFixed64Mysrvc(dAtA, i, uint64(math.Float64bits(float64(m.ContractYearlyPrice))))
	}
	if len(m.ContractAnniversary) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.ContractAnniversary)))
		i += copy(dAtA[i:], m.ContractAnniversary)
	}
	if m.ContractBalance != 0 {
		dAtA[i] = 0x99
		i++
		dAtA[i] = 0x1
		i++
		i = encodeFixed64Mysrvc(dAtA, i, uint64(math.Float64bits(float64(m.ContractBalance))))
	}
	if m.ElviDijhatralek != 0 {
		dAtA[i] = 0xa1
		i++
		dAtA[i] = 0x1
		i++
		i = encodeFixed64Mysrvc(dAtA, i, uint64(math.Float64bits(float64(m.ElviDijhatralek))))
	}
	if len(m.ClientName) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.ClientName)))
		i += copy(dAtA[i:], m.ClientName)
	}
	if m.ClientCode != 0 {
		dAtA[i] = 0xb1
		i++
		dAtA[i] = 0x1
		i++
		i = encodeFixed64Mysrvc(dAtA, i, uint64(math.Float64bits(float64(m.ClientCode))))
	}
	if m.OwnerCode != 0 {
		dAtA[i] = 0xb9
		i++
		dAtA[i] = 0x1
		i++
		i = encodeFixed64Mysrvc(dAtA, i, uint64(math.Float64bits(float64(m.OwnerCode))))
	}
	if len(m.CarPlate) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.CarPlate)))
		i += copy(dAtA[i:], m.CarPlate)
	}
	if len(m.CarCategory) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.CarCategory)))
		i += copy(dAtA[i:], m.CarCategory)
	}
	if len(m.CarMake) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.CarMake)))
		i += copy(dAtA[i:], m.CarMake)
	}
	if len(m.CarModel) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.CarModel)))
		i += copy(dAtA[i:], m.CarModel)
	}
	if len(m.DealerCode) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.DealerCode)))
		i += copy(dAtA[i:], m.DealerCode)
	}
	if len(m.DealerName) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.DealerName)))
		i += copy(dAtA[i:], m.DealerName)
	}
	if len(m.KockhelyIrszam) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.KockhelyIrszam)))
		i += copy(dAtA[i:], m.KockhelyIrszam)
	}
	if len(m.KockhelyTelepules) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.KockhelyTelepules)))
		i += copy(dAtA[i:], m.KockhelyTelepules)
	}
	if len(m.KockhelyCim) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.KockhelyCim)))
		i += copy(dAtA[i:], m.KockhelyCim)
	}
	if len(m.ClientPpid) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.ClientPpid)))
		i += copy(dAtA[i:], m.ClientPpid)
	}
	if len(m.ClientCity) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.ClientCity)))
		i += copy(dAtA[i:], m.ClientCity)
	}
	if len(m.ElozmenybiztKod) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.ElozmenybiztKod)))
		i += copy(dAtA[i:], m.ElozmenybiztKod)
	}
	if len(m.ElozmenybiztNev) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMysrvc(dAtA, i, uint64(len(m.ElozmenybiztNev)))
		i += copy(dAtA[i:], m.ElozmenybiztNev)
	}
	if m.FlottaAzon != 0 {
		dAtA[i] = 0xa9
		i++
		dAtA[i] = 0x2
		i++
		i = encodeFixed64Mysrvc(dAtA, i, uint64(math.Float64bits(float64(m.FlottaAzon))))
	}
	if m.FlottaVonalkod != 0 {
		dAtA[i] = 0xb1
		i++
		dAtA[i] = 0x2
		i++
		i = encodeFixed64Mysrvc(dAtA, i, uint64(math.Float64bits(float64(m.FlottaVonalkod))))
	}
	return i, nil
}

func encodeFixed64Mysrvc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Mysrvc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMysrvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LastMod_Input) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LastMod_Output) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ret)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	return n
}

func (m *Contracts_Input) Size() (n int) {
	var l int
	_ = l
	if m.PBazon != 0 {
		n += 1 + sozMysrvc(uint64(m.PBazon))
	}
	l = len(m.PSzerzAzon)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	l = len(m.PModkod)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	l = len(m.PKotvenyszam)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	if m.PAjanlatsorszam != 0 {
		n += 9
	}
	l = len(m.PUgyfelnev)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	l = len(m.PTelepules)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	if m.PTagAzon != 0 {
		n += 1 + sozMysrvc(uint64(m.PTagAzon))
	}
	if m.PUkTorzsszam != 0 {
		n += 1 + sozMysrvc(uint64(m.PUkTorzsszam))
	}
	l = len(m.PRendszam)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	l = len(m.PKockhelyIrszam)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	if m.PKockhelyKtid != 0 {
		n += 1 + sozMysrvc(uint64(m.PKockhelyKtid))
	}
	l = len(m.PElozmenyBizt)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	if m.PFlottaAzon != 0 {
		n += 1 + sozMysrvc(uint64(m.PFlottaAzon))
	}
	if m.PFlottaVonalkod != 0 {
		n += 1 + sozMysrvc(uint64(m.PFlottaVonalkod))
	}
	if m.PLimit != 0 {
		n += 2 + sozMysrvc(uint64(m.PLimit))
	}
	if m.POffset != 0 {
		n += 2 + sozMysrvc(uint64(m.POffset))
	}
	l = len(m.POrder)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	l = len(m.PCount)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	return n
}

func (m *Contracts_Output) Size() (n int) {
	var l int
	_ = l
	if m.PMaradt != 0 {
		n += 1 + sozMysrvc(uint64(m.PMaradt))
	}
	if m.PHibaKod != 0 {
		n += 1 + sozMysrvc(uint64(m.PHibaKod))
	}
	l = len(m.PHibaSzov)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	if len(m.Ret) > 0 {
		for _, e := range m.Ret {
			l = e.Size()
			n += 1 + l + sovMysrvc(uint64(l))
		}
	}
	return n
}

func (m *ContractsRecTyp_Bruno) Size() (n int) {
	var l int
	_ = l
	if m.RowNum != 0 {
		n += 1 + sozMysrvc(uint64(m.RowNum))
	}
	if m.ContractNumber != 0 {
		n += 9
	}
	if m.MemberCode != 0 {
		n += 9
	}
	l = len(m.Modkod)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	l = len(m.Modrnev)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	if m.BidId != 0 {
		n += 9
	}
	l = len(m.ContractOldId)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	l = len(m.ContractStatus)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	l = len(m.ContractStatusName)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	l = len(m.ContractStatusShort)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	l = len(m.ContractRecordingDate)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	l = len(m.ContractBtkezd)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	l = len(m.ContractBeginDate)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	l = len(m.ContractDeletionValidFrom)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	l = len(m.ContractBalanceDate)
	if l > 0 {
		n += 1 + l + sovMysrvc(uint64(l))
	}
	l = len(m.ContractFutureBalanceDate)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	if m.ContractYearlyPrice != 0 {
		n += 10
	}
	l = len(m.ContractAnniversary)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	if m.ContractBalance != 0 {
		n += 10
	}
	if m.ElviDijhatralek != 0 {
		n += 10
	}
	l = len(m.ClientName)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	if m.ClientCode != 0 {
		n += 10
	}
	if m.OwnerCode != 0 {
		n += 10
	}
	l = len(m.CarPlate)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	l = len(m.CarCategory)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	l = len(m.CarMake)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	l = len(m.CarModel)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	l = len(m.DealerCode)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	l = len(m.DealerName)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	l = len(m.KockhelyIrszam)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	l = len(m.KockhelyTelepules)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	l = len(m.KockhelyCim)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	l = len(m.ClientPpid)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	l = len(m.ClientCity)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	l = len(m.ElozmenybiztKod)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	l = len(m.ElozmenybiztNev)
	if l > 0 {
		n += 2 + l + sovMysrvc(uint64(l))
	}
	if m.FlottaAzon != 0 {
		n += 10
	}
	if m.FlottaVonalkod != 0 {
		n += 10
	}
	return n
}

func sovMysrvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMysrvc(x uint64) (n int) {
	return sovMysrvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LastMod_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMysrvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastMod_Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastMod_Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMysrvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMysrvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastMod_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMysrvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastMod_Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastMod_Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMysrvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMysrvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contracts_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMysrvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contracts_Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contracts_Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PBazon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PBazon = v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PSzerzAzon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PSzerzAzon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PModkod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PModkod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PKotvenyszam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PKotvenyszam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PAjanlatsorszam", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.PAjanlatsorszam = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PUgyfelnev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PUgyfelnev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PTelepules", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PTelepules = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PTagAzon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PTagAzon = v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PUkTorzsszam", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PUkTorzsszam = v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PRendszam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PRendszam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PKockhelyIrszam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PKockhelyIrszam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PKockhelyKtid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PKockhelyKtid = v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PElozmenyBizt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PElozmenyBizt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PFlottaAzon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PFlottaAzon = v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PFlottaVonalkod", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PFlottaVonalkod = v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PLimit", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PLimit = v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field POffset", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.POffset = v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field POrder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.POrder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMysrvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMysrvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contracts_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMysrvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contracts_Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contracts_Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PMaradt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PMaradt = v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PHibaKod", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PHibaKod = v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PHibaSzov", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PHibaSzov = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ret = append(m.Ret, &ContractsRecTyp_Bruno{})
			if err := m.Ret[len(m.Ret)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMysrvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMysrvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractsRecTyp_Bruno) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMysrvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractsRecTyp_Bruno: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractsRecTyp_Bruno: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.RowNum = v
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractNumber", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.ContractNumber = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberCode", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.MemberCode = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modkod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modkod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modrnev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modrnev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidId", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.BidId = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractOldId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractOldId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractStatusName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractStatusName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractStatusShort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractStatusShort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractRecordingDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractRecordingDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractBtkezd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractBtkezd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractBeginDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractBeginDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractDeletionValidFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractDeletionValidFrom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractBalanceDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractBalanceDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractFutureBalanceDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractFutureBalanceDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractYearlyPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.ContractYearlyPrice = float64(math.Float64frombits(v))
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAnniversary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAnniversary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractBalance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.ContractBalance = float64(math.Float64frombits(v))
		case 20:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElviDijhatralek", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.ElviDijhatralek = float64(math.Float64frombits(v))
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCode", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.ClientCode = float64(math.Float64frombits(v))
		case 23:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerCode", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.OwnerCode = float64(math.Float64frombits(v))
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarPlate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarPlate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarCategory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarCategory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarMake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarMake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealerCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DealerCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DealerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KockhelyIrszam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KockhelyIrszam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KockhelyTelepules", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KockhelyTelepules = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KockhelyCim", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KockhelyCim = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPpid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientPpid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElozmenybiztKod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElozmenybiztKod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElozmenybiztNev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysrvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElozmenybiztNev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlottaAzon", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.FlottaAzon = float64(math.Float64frombits(v))
		case 38:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlottaVonalkod", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.FlottaVonalkod = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMysrvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMysrvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMysrvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMysrvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMysrvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMysrvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMysrvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMysrvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMysrvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMysrvc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mysrvc/mysrvc.proto", fileDescriptorMysrvc) }

var fileDescriptorMysrvc = []byte{
	// 1271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x56, 0xcd, 0x6e, 0x1b, 0x37,
	0x17, 0xfd, 0x26, 0x89, 0x65, 0x8b, 0xfe, 0x91, 0x4c, 0xc7, 0xf1, 0x38, 0xb1, 0x15, 0x47, 0xc9,
	0x97, 0xa4, 0x01, 0x1a, 0x27, 0x29, 0xd0, 0x45, 0x36, 0x45, 0xec, 0x34, 0x68, 0xe0, 0xd8, 0x0e,
	0x64, 0x27, 0x40, 0x57, 0x04, 0x35, 0xa4, 0x64, 0x46, 0x33, 0x43, 0x82, 0xc3, 0x51, 0x30, 0x5a,
	0xf6, 0x01, 0xba, 0xe9, 0xa6, 0x8b, 0x3e, 0x50, 0x97, 0x05, 0xfa, 0x02, 0x81, 0xdb, 0x67, 0xe8,
	0xba, 0xe0, 0x25, 0x67, 0x34, 0x92, 0xbb, 0x92, 0x78, 0xce, 0x21, 0xef, 0xbd, 0x33, 0xf7, 0xf0,
	0x0e, 0xda, 0x48, 0x8a, 0x4c, 0x8f, 0xa3, 0x7d, 0xf7, 0xf3, 0x54, 0x69, 0x69, 0x24, 0x6e, 0xb8,
	0xd5, 0xed, 0x9d, 0xa1, 0x94, 0xc3, 0x98, 0xef, 0x53, 0x25, 0xf6, 0x69, 0x9a, 0x4a, 0x43, 0x8d,
	0x90, 0x69, 0xe6, 0x54, 0xdd, 0x16, 0x5a, 0x7d, 0x47, 0x33, 0x73, 0x2c, 0x19, 0x79, 0x9b, 0xaa,
	0xdc, 0x74, 0xbb, 0x68, 0xad, 0x04, 0x4e, 0x73, 0xa3, 0x72, 0x83, 0xdb, 0xe8, 0xba, 0xe6, 0x26,
	0x0c, 0xf6, 0x82, 0xc7, 0xcd, 0x9e, 0xfd, 0xdb, 0xfd, 0x79, 0x01, 0xb5, 0x0e, 0x65, 0x6a, 0x34,
	0x8d, 0x4c, 0xe6, 0xf6, 0xe1, 0x2d, 0xb4, 0xa8, 0x48, 0x9f, 0x4e, 0x64, 0x0a, 0xca, 0xf5, 0x5e,
	0x43, 0x1d, 0xd8, 0x15, 0xde, 0x43, 0x2b, 0x8a, 0x64, 0x13, 0xae, 0x27, 0x04, 0xd8, 0x6b, 0x70,
	0x0e, 0x52, 0x67, 0x16, 0x7a, 0x65, 0x15, 0xdb, 0x68, 0x49, 0x91, 0x44, 0xb2, 0x91, 0x64, 0xe1,
	0x75, 0x60, 0x17, 0xd5, 0x31, 0x2c, 0xf1, 0x7d, 0xb4, 0xaa, 0xc8, 0x48, 0x9a, 0x31, 0x4f, 0x8b,
	0x6c, 0x42, 0x93, 0xf0, 0x06, 0xf0, 0x2b, 0xea, 0x68, 0x8a, 0xe1, 0xaf, 0x50, 0x5b, 0x11, 0xfa,
	0x89, 0xa6, 0x31, 0x35, 0x99, 0xd4, 0xa0, 0x5b, 0xd8, 0x0b, 0x1e, 0x07, 0xbd, 0x96, 0x7a, 0x35,
	0x03, 0xe3, 0xbb, 0x68, 0x59, 0x91, 0x7c, 0x58, 0x0c, 0x78, 0x9c, 0xf2, 0x71, 0xd8, 0xf0, 0xb9,
	0x7c, 0x28, 0x11, 0x27, 0x30, 0x3c, 0xe6, 0x2a, 0x8f, 0x79, 0x16, 0x2e, 0x7a, 0xc1, 0x79, 0x89,
	0xe0, 0x1d, 0x84, 0x14, 0x31, 0x74, 0xe8, 0x8a, 0x59, 0x82, 0x52, 0x97, 0xd4, 0x39, 0x1d, 0x42,
	0x29, 0x0f, 0xd0, 0x9a, 0x22, 0xf9, 0x88, 0x18, 0xa9, 0x27, 0x19, 0x24, 0xd2, 0x04, 0xc5, 0x8a,
	0xfa, 0x30, 0x3a, 0x2f, 0x31, 0xbc, 0x6b, 0xcf, 0xd0, 0x3c, 0x65, 0xa0, 0x40, 0x10, 0xa3, 0xa9,
	0x7a, 0x1e, 0xc0, 0x4f, 0xd0, 0xba, 0x2d, 0x3a, 0x1a, 0x5d, 0xf0, 0xb8, 0x20, 0xc2, 0x15, 0xb4,
	0x0c, 0xaa, 0x96, 0x3a, 0xf2, 0xf8, 0x5b, 0x57, 0xd0, 0x43, 0xd4, 0xaa, 0x69, 0x47, 0x46, 0xb0,
	0x70, 0x05, 0x22, 0xae, 0x56, 0xca, 0x23, 0x23, 0x98, 0xd3, 0xf1, 0x58, 0x4e, 0x12, 0x9e, 0x16,
	0xa4, 0x2f, 0x26, 0x26, 0x5c, 0x85, 0x13, 0x57, 0xd5, 0xf7, 0x1e, 0x3d, 0x10, 0x13, 0x83, 0xbb,
	0xf6, 0x81, 0x0f, 0x62, 0x69, 0x0c, 0x75, 0x15, 0xae, 0xc1, 0x69, 0xcb, 0xea, 0x0d, 0x60, 0x50,
	0x24, 0xe4, 0xe7, 0x35, 0x63, 0x99, 0xd2, 0xd8, 0xbe, 0xb8, 0x16, 0xe8, 0x5a, 0x5e, 0xf7, 0xd1,
	0xc3, 0xae, 0x2d, 0x62, 0x91, 0x08, 0x13, 0xb6, 0x7d, 0x5b, 0xbc, 0xb3, 0x2b, 0xf7, 0xd2, 0xe5,
	0x60, 0x90, 0x71, 0x13, 0xae, 0x03, 0xb3, 0xa8, 0x4e, 0x61, 0xe9, 0xf6, 0x48, 0xcd, 0xb8, 0x0e,
	0x31, 0xe4, 0xd8, 0x50, 0xa7, 0x76, 0xe5, 0x88, 0x48, 0xe6, 0xa9, 0x09, 0x37, 0x3c, 0x71, 0x68,
	0x57, 0xdd, 0xdf, 0x02, 0xd4, 0x9e, 0x36, 0xa4, 0xef, 0x5b, 0xd7, 0x56, 0x54, 0x53, 0x66, 0x7c,
	0x4b, 0x2e, 0xaa, 0x63, 0x58, 0xba, 0x97, 0x78, 0x21, 0xfa, 0x94, 0xd8, 0xd4, 0xaf, 0xf9, 0x97,
	0xf8, 0x83, 0xe8, 0xd3, 0x23, 0xc9, 0x70, 0xc7, 0xf6, 0x00, 0xb0, 0xd9, 0x44, 0x8e, 0x7d, 0x4b,
	0x36, 0x81, 0x3e, 0x9b, 0xc8, 0x31, 0xde, 0x77, 0x86, 0xb8, 0xb1, 0x77, 0xfd, 0xf1, 0xf2, 0x8b,
	0xdd, 0xa7, 0xde, 0x75, 0x55, 0xfc, 0x1e, 0x8f, 0xce, 0x0b, 0x45, 0x0e, 0x74, 0x9e, 0x4a, 0xe7,
	0x97, 0x7f, 0x96, 0xd1, 0xe6, 0x7f, 0xd2, 0xb6, 0x22, 0x2d, 0x3f, 0x93, 0x34, 0x4f, 0x4a, 0xd7,
	0x68, 0xf9, 0xf9, 0x24, 0x4f, 0xf0, 0x23, 0xd4, 0x8a, 0xfc, 0x0e, 0xcb, 0xf6, 0xb9, 0x86, 0x34,
	0x83, 0xde, 0x5a, 0x09, 0x9f, 0x00, 0x6a, 0x1b, 0x36, 0xe1, 0xf6, 0x1f, 0x89, 0x24, 0xe3, 0x90,
	0x6c, 0xd0, 0x43, 0x0e, 0x3a, 0x94, 0x8c, 0xe3, 0x5b, 0xa8, 0xe1, 0xbd, 0xe5, 0xbc, 0xe3, 0x57,
	0x38, 0x44, 0x8b, 0x89, 0x64, 0xda, 0xda, 0x60, 0xc1, 0x99, 0xce, 0x2f, 0xf1, 0x26, 0x6a, 0xf4,
	0x05, 0x23, 0x82, 0x81, 0x3f, 0x82, 0xde, 0x42, 0x5f, 0xb0, 0xb7, 0xd0, 0x42, 0x55, 0x4a, 0x32,
	0x06, 0xde, 0xd9, 0x63, 0xb5, 0x84, 0x4f, 0x63, 0xab, 0xab, 0xa7, 0x9e, 0x19, 0x6a, 0xf2, 0x0c,
	0x6c, 0xd2, 0x9c, 0xa6, 0x7e, 0x06, 0x28, 0x7e, 0x86, 0x6e, 0xce, 0x09, 0x49, 0x4a, 0x13, 0x0e,
	0x96, 0x69, 0xf6, 0xf0, 0xac, 0xfa, 0x84, 0x26, 0x1c, 0xbf, 0x40, 0x9b, 0xf3, 0x3b, 0xb2, 0x0b,
	0xa9, 0x8d, 0xf7, 0xd0, 0xc6, 0xec, 0x96, 0x33, 0x4b, 0xe1, 0x6f, 0xd1, 0x56, 0xb5, 0x47, 0xf3,
	0x48, 0x6a, 0x26, 0xd2, 0x21, 0x61, 0xd4, 0x70, 0xef, 0xa9, 0xea, 0xc8, 0x5e, 0xc9, 0xbe, 0xa6,
	0x86, 0xcf, 0x94, 0xd1, 0x37, 0x23, 0x3e, 0x71, 0xce, 0xaa, 0x95, 0x71, 0x00, 0x28, 0x7e, 0x8a,
	0x36, 0xa6, 0x42, 0x3e, 0x14, 0xa9, 0x3b, 0xdc, 0xd9, 0x6b, 0xbd, 0x12, 0x5b, 0x06, 0x0e, 0xfe,
	0x0e, 0xed, 0x54, 0x7a, 0xc6, 0x63, 0x6e, 0xaf, 0x63, 0x32, 0xa6, 0xb1, 0x60, 0x64, 0xa0, 0x65,
	0x02, 0x8e, 0x6b, 0xf6, 0xb6, 0x4b, 0xcd, 0x6b, 0x2f, 0xf9, 0x68, 0x15, 0x6f, 0xb4, 0x4c, 0x66,
	0x9e, 0x42, 0x9f, 0xc6, 0x34, 0x8d, 0xb8, 0x0b, 0xd9, 0x9a, 0x7d, 0x0a, 0x07, 0x8e, 0xbb, 0x12,
	0x74, 0x90, 0x9b, 0x5c, 0xf3, 0xd9, 0xad, 0xed, 0xd9, 0xa0, 0x6f, 0x40, 0x52, 0x3f, 0xa0, 0x1e,
	0xb4, 0xe0, 0x54, 0xc7, 0x05, 0x51, 0x5a, 0x44, 0x1c, 0xcc, 0x1b, 0x4c, 0x83, 0xfe, 0x08, 0xdc,
	0x7b, 0x4b, 0xe1, 0xe7, 0xb5, 0x17, 0x4c, 0xd3, 0x54, 0x8c, 0xb9, 0xce, 0xa8, 0x2e, 0xbc, 0xab,
	0xab, 0x2d, 0xaf, 0xa6, 0x94, 0xbd, 0xcb, 0xe7, 0x6b, 0x03, 0xaf, 0x07, 0xbd, 0xd6, 0x5c, 0x59,
	0x56, 0xca, 0xe3, 0xb1, 0x20, 0x4c, 0x7c, 0xba, 0xa0, 0x46, 0xd3, 0x98, 0x8f, 0xc2, 0x9b, 0x4e,
	0x6a, 0xf1, 0xd7, 0x53, 0xd8, 0x9a, 0x24, 0x8a, 0x05, 0x4f, 0x8d, 0x6b, 0xb0, 0x4d, 0x77, 0xab,
	0x3b, 0x08, 0x1a, 0x6b, 0x2a, 0x00, 0x17, 0xdd, 0x72, 0x2e, 0x72, 0x10, 0xb8, 0x68, 0x17, 0x21,
	0xf9, 0x39, 0x2d, 0x5d, 0xb6, 0x05, 0x7c, 0x13, 0x10, 0xa0, 0xef, 0xa0, 0x66, 0x44, 0x35, 0x51,
	0xb1, 0x7d, 0x96, 0x21, 0x1c, 0xbf, 0x14, 0x51, 0xfd, 0xde, 0xae, 0xf1, 0x3d, 0xb4, 0x62, 0xc9,
	0x88, 0x1a, 0x3e, 0x94, 0xba, 0x08, 0xb7, 0x81, 0x5f, 0x8e, 0xa8, 0x3e, 0xf4, 0x90, 0xbd, 0xab,
	0xac, 0x24, 0xa1, 0x23, 0x1e, 0xde, 0x76, 0x6e, 0x8c, 0xa8, 0x3e, 0xa6, 0xa3, 0xea, 0xe8, 0x44,
	0x32, 0x1e, 0x87, 0x77, 0xaa, 0xa3, 0x8f, 0xed, 0xda, 0xe6, 0xcd, 0x38, 0x8d, 0xcb, 0xbc, 0x76,
	0x5c, 0x61, 0x0e, 0x82, 0xc4, 0xa6, 0x02, 0xa8, 0x7c, 0xb7, 0x2e, 0x80, 0xca, 0x1f, 0xa1, 0xd6,
	0xfc, 0xa8, 0xe9, 0xb8, 0x36, 0x1f, 0xcd, 0x4e, 0x9a, 0xaf, 0x11, 0xae, 0x84, 0xd3, 0x01, 0x79,
	0xd7, 0x75, 0x79, 0xc9, 0x4c, 0xe7, 0xe4, 0x3d, 0xb4, 0x52, 0xc9, 0x23, 0x91, 0x84, 0x7b, 0xae,
	0xe8, 0x12, 0x3b, 0x14, 0x49, 0xed, 0xa1, 0x2b, 0x25, 0x58, 0x78, 0xaf, 0xfe, 0x56, 0xde, 0x2b,
	0xc1, 0xea, 0x6f, 0x45, 0x98, 0x22, 0xec, 0xd6, 0x05, 0x87, 0xc2, 0x14, 0xae, 0x05, 0xdc, 0xf4,
	0xb2, 0x23, 0x0d, 0x6e, 0xf3, 0xfb, 0x6e, 0x50, 0xd6, 0x71, 0x7b, 0xa9, 0xcf, 0x4b, 0xed, 0xbd,
	0xf7, 0xe0, 0xaa, 0xf4, 0xc4, 0x7d, 0x03, 0xd4, 0x27, 0xe0, 0xff, 0x5d, 0x33, 0x0c, 0xa6, 0x03,
	0xf0, 0x11, 0x6a, 0xcd, 0x8f, 0xbf, 0x87, 0xee, 0x72, 0x1e, 0xcc, 0x4c, 0xbf, 0x17, 0x5f, 0x02,
	0xd4, 0x38, 0x2e, 0xce, 0xf4, 0x38, 0xc2, 0x1c, 0xad, 0xb9, 0x7f, 0xc4, 0x7f, 0x5e, 0xe1, 0xcd,
	0x72, 0x72, 0xcc, 0x7c, 0x80, 0xdd, 0xbe, 0x35, 0x0f, 0xbb, 0x71, 0xd6, 0x7d, 0xf0, 0xd3, 0x9f,
	0x7f, 0xff, 0x72, 0xad, 0xd3, 0xdd, 0xf6, 0x9f, 0x79, 0xfb, 0xe3, 0xe7, 0xfb, 0xb3, 0x27, 0xbe,
	0x0c, 0x9e, 0x60, 0x89, 0xda, 0x1e, 0xac, 0x06, 0x0e, 0xde, 0xba, 0x32, 0xa2, 0x7c, 0xa8, 0xf0,
	0x2a, 0xe1, 0x83, 0x3d, 0x84, 0x60, 0x7b, 0xdd, 0x3b, 0x57, 0x83, 0x55, 0xda, 0x97, 0xc1, 0x93,
	0x67, 0xc1, 0x41, 0xfb, 0xf7, 0xcb, 0x4e, 0xf0, 0xc7, 0x65, 0x27, 0xf8, 0x72, 0xd9, 0x09, 0x7e,
	0xfd, 0xab, 0xf3, 0xbf, 0x7e, 0x03, 0xbe, 0x2c, 0xbf, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0x89,
	0xa1, 0x83, 0x81, 0x96, 0x0a, 0x00, 0x00,
}
